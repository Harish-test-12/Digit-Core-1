name: Dynamic Build and Deployment Pipeline

on:
  push:
    branches:
      - master  # Trigger pipeline on changes pushed to the master branch
  # workflow_dispatch:  # Allow manual triggering
    paths:
      - 'core-services/**'  # Trigger only if files within 'core-services' change

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.detect.outputs.changed-services }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Fetch the last two commits to allow HEAD~1

      - name: Detect Changed Services
        id: detect
        run: |
          # Get the list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
          
          # Filter out unique top-level directories within 'core-services'
          CHANGED_SERVICES=$(echo "$CHANGED_FILES" | grep -E '^core-services/' | cut -d'/' -f2 | uniq)
          
          # Convert to a plain comma-separated string if there are any services
          if [[ -z "$CHANGED_SERVICES" ]]; then
            CHANGED_SERVICES=""
          else
            CHANGED_SERVICES=$(echo "$CHANGED_SERVICES" | tr '\n' ',')
            CHANGED_SERVICES=${CHANGED_SERVICES%,}  # Remove trailing comma
          fi
          
          echo "Changed Services: $CHANGED_SERVICES"
          
          # Output the result as a valid JSON array
          if [[ -n "$CHANGED_SERVICES" ]]; then
            CHANGED_SERVICES_JSON="[\"$(echo $CHANGED_SERVICES | sed 's/,/","/g')\"]"
            echo "::set-output name=changed-services::$CHANGED_SERVICES_JSON"
          else
            echo "::set-output name=changed-services::[]"
          fi

      - name: Debug Output
        run: |
          echo "Changed Services: ${{ steps.detect.outputs.changed-services }}"

  build:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.changed-services != '[]' }}  # Proceed only if services changed (non-empty)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.changed-services) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Check if DB folder exists
        id: check-db-folder
        run: |
          echo "Checking if DB folder exists for service: ${{ matrix.service }}"
          FOLDER_PATH="core-services/${{ matrix.service }}/src/main/resources/db"
          if [ -d "$FOLDER_PATH" ]; then
            echo "DB folder exists at $FOLDER_PATH"
            echo "folder_exists=true" >> $GITHUB_ENV
          else
            echo "DB folder does not exist at $FOLDER_PATH"
            echo "folder_exists=false" >> $GITHUB_ENV
          fi
      - name: Generate the Next Tag
        id: tag
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "Generating the next tag for service: ${{ matrix.service }}"
      
          # Set variables
          BRANCH=${{ github.ref_name }}
          COMMIT_HASH=$(git rev-parse --short HEAD)
          SERVICE_NAME=${{ matrix.service }}
      
          # Log in to Docker Hub and fetch a token
          TOKEN=$(curl -s -X POST "https://hub.docker.com/v2/users/login/" \
            -H "Content-Type: application/json" \
            -d '{"username": "'$DOCKER_USERNAME'", "password": "'$DOCKER_PASSWORD'"}' | jq -r .token)
      
          # Check if the repository exists
          REPO_CHECK=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/$SERVICE_NAME/")
      
          if [ "$REPO_CHECK" -ne 200 ]; then
            echo "Repository does not exist. Assuming a first-time build."
            NEXT_TAG="${BRANCH}-${COMMIT_HASH}-1"
          else
            # Fetch existing tags for the service
            EXISTING_TAGS=$(curl -s -H "Authorization: JWT $TOKEN" \
              "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/$SERVICE_NAME/tags?page_size=100" | jq -r '.results[].name')
      
            # Filter for the current branch and commit hash
            LATEST_TAG=$(echo "$EXISTING_TAGS" | grep "^${BRANCH}-${COMMIT_HASH}-" | sort -V | tail -n 1)
            if [ -z "$LATEST_TAG" ]; then
              # No tag exists for this branch and commit hash
              NEXT_TAG="${BRANCH}-${COMMIT_HASH}-1"
            else
              # Increment the numeric part of the latest tag
              TAG_NUMBER=$(echo "$LATEST_TAG" | awk -F- '{print $NF}')
              NEXT_TAG="${BRANCH}-${COMMIT_HASH}-$((TAG_NUMBER + 1))"
            fi
          fi
      
          # Export the next tag
          echo "::set-output name=tag::$NEXT_TAG"
          echo "NEXT_TAG=$NEXT_TAG" >> $GITHUB_ENV
          echo "Generated Tag: $NEXT_TAG"
      
      - name: Build and Push Application Docker Image
        uses: docker/build-push-action@v5
        with:
          context: core-services/${{ matrix.service }}
          file: core-services/${{ matrix.service }}/build/maven/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:${{ steps.tag.outputs.tag }}
          build-args: |
            WORK_DIR=core-services/${{ matrix.service }}
      
      - name: Build and Push Database Docker Image
        if: ${{ env.folder_exists == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: core-services/${{ matrix.service }}/src/main/resources/db
          file: core-services/${{ matrix.service }}/src/main/resources/db/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-db:${{ steps.tag.outputs.tag }}
      