name: Dynamic Build and Deployment Pipeline

on:
  push:
    branches:
      - master  # Trigger pipeline on changes pushed to the master branch
  # workflow_dispatch:  # Allow manual triggering
    paths:
      - 'core-services/**'  # Trigger only if files within 'core-services' change

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.detect.outputs.changed-services }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Fetch the last two commits to allow HEAD~1

      - name: Detect Changed Services
        id: detect
        run: |
          # Get the list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
          
          # Filter out unique top-level directories within 'core-services'
          CHANGED_SERVICES=$(echo "$CHANGED_FILES" | grep -E '^core-services/' | cut -d'/' -f2 | uniq)
          
          # Convert to a plain comma-separated string if there are any services
          if [[ -z "$CHANGED_SERVICES" ]]; then
            CHANGED_SERVICES=""
          else
            CHANGED_SERVICES=$(echo "$CHANGED_SERVICES" | tr '\n' ',')
            CHANGED_SERVICES=${CHANGED_SERVICES%,}  # Remove trailing comma
          fi
          
          echo "Changed Services: $CHANGED_SERVICES"
          
          # Output the result as a valid JSON array
          if [[ -n "$CHANGED_SERVICES" ]]; then
            CHANGED_SERVICES_JSON="[\"$(echo $CHANGED_SERVICES | sed 's/,/","/g')\"]"
            echo "::set-output name=changed-services::$CHANGED_SERVICES_JSON"
          else
            echo "::set-output name=changed-services::[]"
          fi

      - name: Debug Output
        run: |
          echo "Changed Services: ${{ steps.detect.outputs.changed-services }}"

  build:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.changed-services != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.changed-services) }}
    outputs:
      docker-image: ${{ steps.save-docker-image.outputs.docker-image }}
      db-image: ${{ steps.save-db-image.outputs.db-image || '' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate the Next Tag
        id: tag
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "Generating the next tag for service: ${{ matrix.service }}"
      
          # Set variables
          BRANCH=${{ github.ref_name }}
          COMMIT_HASH=$(git rev-parse --short HEAD)
          SERVICE_NAME=${{ matrix.service }}
      
          # Log in to Docker Hub and fetch a token
          TOKEN=$(curl -s -X POST "https://hub.docker.com/v2/users/login/" \
            -H "Content-Type: application/json" \
            -d '{"username": "'$DOCKER_USERNAME'", "password": "'$DOCKER_PASSWORD'"}' | jq -r .token)
      
          # Check if the repository exists
          REPO_CHECK=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/$SERVICE_NAME/")
      
          if [ "$REPO_CHECK" -ne 200 ]; then
            echo "Repository does not exist. Assuming a first-time build."
            NEXT_TAG="${BRANCH}-${COMMIT_HASH}-1"
          else
            # Fetch existing tags for the service
            EXISTING_TAGS=$(curl -s -H "Authorization: JWT $TOKEN" \
              "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/$SERVICE_NAME/tags?page_size=100" | jq -r '.results[].name')
      
            # Filter for the current branch and commit hash
            LATEST_TAG=$(echo "$EXISTING_TAGS" | grep "^${BRANCH}-${COMMIT_HASH}-" | sort -V | tail -n 1)
            if [ -z "$LATEST_TAG" ]; then
              # No tag exists for this branch and commit hash
              NEXT_TAG="${BRANCH}-${COMMIT_HASH}-1"
            else
              # Increment the numeric part of the latest tag
              TAG_NUMBER=$(echo "$LATEST_TAG" | awk -F- '{print $NF}')
              NEXT_TAG="${BRANCH}-${COMMIT_HASH}-$((TAG_NUMBER + 1))"
            fi
          fi
      
          # Export the next tag
          echo "::set-output name=tag::$NEXT_TAG"
          echo "NEXT_TAG=$NEXT_TAG" >> $GITHUB_ENV
          echo "Generated Tag: $NEXT_TAG"

      - name: Build and Push Application Docker Image
        id: build_push_docker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: build/maven/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:${{ steps.tag.outputs.tag }}
          build-args: |
            WORK_DIR=core-services/${{ matrix.service }}

      - name: Save Application Docker Image
        id: save-docker-image
        run: |
          docker_image="${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:${{ steps.tag.outputs.tag }}"
          echo "docker-image=$docker_image" >> $GITHUB_ENV
          echo "::set-output name=docker-image::$docker_image"
          echo "docker-image=$docker_image"
          
      - name: Check if DB folder exists
        id: check-db-folder
        run: |
          FOLDER_PATH="core-services/${{ matrix.service }}/src/main/resources/db"
          if [ -d "$FOLDER_PATH" ]; then
            echo "folder_exists=true" >> $GITHUB_ENV
          else
            echo "folder_exists=false" >> $GITHUB_ENV
          fi
  
      - name: Build and Push Database Docker Image
        if: ${{ env.folder_exists == 'true' }}
        id: build_push_db_docker
        uses: docker/build-push-action@v5
        with:
          context: core-services/${{ matrix.service }}/src/main/resources/db
          file: core-services/${{ matrix.service }}/src/main/resources/db/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-db:${{ steps.tag.outputs.tag }}
  
      - name: Save Database Docker Image
        if: ${{ env.folder_exists == 'true' }}
        id: save-db-image
        run: |
          echo "db-image=${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-db:${{ steps.tag.outputs.tag }}" >> $GITHUB_ENV
          echo "::set-output name=db-image::${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-db:${{ steps.tag.outputs.tag }}"
          echo "::set-output name=db-image::$db_image"
          echo "db-image=$db_image"
      - name: Debug Outputs
        run: |
          echo "Docker Image: ${{ steps.save-docker-image.outputs.docker-image }}"
          echo "DB Image: ${{ steps.save-db-image.outputs.db-image }}"

  Deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Debug Docker Image Outputs
        run: |
          echo "Docker Images: ${{ needs.build.outputs.docker-image }}"
          echo "DB Images: ${{ needs.build.outputs.db-image }}"
      # - name: Verify Docker Images
      #   run: |
      #     echo "Verifying Docker Image: ${{ needs.build.outputs.docker-image }}"
      #     echo "Verifying DB Image: ${{ needs.build.outputs.db-image }}"
          
      #     # Verify if Docker images are accessible
      #     docker pull ${{ needs.build.outputs.docker-image }} || { echo "Docker image not found!"; exit 1; }
      #     docker pull ${{ needs.build.outputs.db-image }} || { echo "DB image not found!"; exit 1; }
          
      #     echo "Both Docker images are accessible."


  #     - name: Checkout Repository
  #       uses: actions/checkout@v3

  #     - name: Clone Deployment Repository
  #       uses: actions/checkout@v3
  #       with:
  #         repository: Harish-test-12/DIGIT-DevOps-1
  #         fetch-depth: 0

  #     - name: Install SOPS
  #       run: |
  #         echo "Checking if SOPS is installed..."
  #         if ! command -v sops &> /dev/null; then
  #           echo "SOPS not found. Installing..."
  #           SOPS_LATEST_VERSION=$(curl -s "https://api.github.com/repos/getsops/sops/releases/latest" | grep -Po '"tag_name": "v\K[0-9.]+')
  #           curl -Lo sops.deb "https://github.com/getsops/sops/releases/download/v${SOPS_LATEST_VERSION}/sops_${SOPS_LATEST_VERSION}_amd64.deb"
  #           sudo apt --fix-broken install ./sops.deb
  #           sudo apt-get update
  #           sudo apt-get install sops
  #         else
  #           echo "SOPS is already installed, skipping installation."
  #         fi

  #     - name: Checkout Branch for Environment File and Helm Charts
  #       run: |
  #         # Checkout the unified-env-lts branch
  #         git checkout unified-env-lts
          
  #         # Define the path to the environment file
  #         ENV_FILE_PATH="./deploy-as-code/helm/environments/unified-dev.yaml"
          
  #         # Check if the environment file exists
  #         if [ ! -f "$ENV_FILE_PATH" ]; then
  #           echo "Error: The specified environment file $ENV_FILE_PATH does not exist"
  #           exit 1
  #         fi
          
  #         echo "Using environment file: $ENV_FILE_PATH"
          
  #         # Extract domain name under the global section using yq
  #         DOMAIN_NAME=$(yq e '.global.domain' $ENV_FILE_PATH)
          
  #         # Check if the domain name exists in the environment file
  #         if [ -z "$DOMAIN_NAME" ]; then
  #           echo "Error: Domain name not found in the environment file"
  #           exit 1
  #         fi
          
  #         echo "Domain Name: $DOMAIN_NAME"
          
  #         # Set the domain name as an environment variable
  #         echo "DOMAIN_NAME=$DOMAIN_NAME" >> $GITHUB_ENV

  #     - name: Install or Update AWS CLI
  #       run: |
  #         if aws --version &>/dev/null; then
  #           echo "AWS CLI is already installed. Skipping installation."
  #         else
  #           echo "AWS CLI not found. Installing..."
  #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #           unzip awscliv2.zip
  #           sudo ./aws/install
  #         fi
  #         aws --version

  #     - name: Generate kubeconfig for EKS
  #       run: |
  #         # Set AWS credentials using GitHub secrets
  #         aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws configure set region ${{ secrets.AWS_REGION }}
          
  #         # Specify the EKS cluster name (you can set this as a secret or environment variable)
  #         CLUSTER_NAME="unified-dev"  # Replace with your actual cluster name or use a secret/environment variable

  #         # Generate the kubeconfig for the EKS cluster
  #         echo "Generating kubeconfig for EKS cluster: $CLUSTER_NAME"
          
  #         # Update kubeconfig using AWS CLI
  #         aws eks update-kubeconfig --name $CLUSTER_NAME --region ${{ secrets.AWS_REGION }}
          
  #         # View the generated kubeconfig to confirm
  #         kubectl config view
  
  #     # Step 6: Verify Cluster Login
  #     - name: Verify Cluster Login
  #       run: |
  #         echo "Attempting to log in to Kubernetes cluster"
  #         kubectl get nodes

      # - name: Deploy Service
      #   run: |
      #     # Authenticate with Docker registry
      #     echo "Logging into Docker registry..."
      #     echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          
      #     # Assign them to local variables if needed
      #     DOCKER_IMAGE="${{ env.DOCKER_IMAGE }}"
      #     DB_IMAGE="${{ env.DB_IMAGE }}"

      #     # Input: Docker image name
      #     # DOCKER_IMAGE=$DOCKER_IMAGE
          
      #     # Extract service name from the Docker image
      #     # SERVICE_NAME=$(echo "$DOCKER_IMAGE" | cut -d':' -f1)
          
      #     # Define the DB Docker image by appending '-db' to the service name
      #     # DB_IMAGE="${SERVICE_NAME}-db:${DOCKER_IMAGE##*:}"
          
      #     echo "Application Image: $DOCKER_IMAGE"
      #     echo "Database Image: $DB_IMAGE"
      #     # Check if the DB image exists in the Docker repository
      #     echo "Checking if the database image exists..."
      #     if docker pull harish7303/"$DB_IMAGE" &>/dev/null; then
      #       echo "Database image found: $DB_IMAGE"
      #       DB_EXISTS=true
      #     else
      #       echo "Database image not found. Only deploying the application container."
      #       DB_EXISTS=false
      #     fi
          
      #     # Define the base charts directory
      #     CHARTS_DIR="./deploy-as-code/helm/charts"
          
      #     # Search for the chart directory containing the service name
      #     CHART_DIR=$(find "$CHARTS_DIR" -type d -name "$SERVICE_NAME" -exec test -f {}/Chart.yaml \; -print -quit)
          
      #     if [ -z "$CHART_DIR" ]; then
      #         echo "Error: No Helm chart found for service '$SERVICE_NAME' in $CHARTS_DIR."
      #         exit 1
      #     fi
          
      #     echo "Found Helm chart for '$SERVICE_NAME' at: $CHART_DIR"
          
      #     # Step 1: Build Helm chart dependencies (resolve local charts)
      #     echo "Building Helm chart dependencies..."
      #     helm dependency build "$CHART_DIR"
          
      #     # Step 2: Detect namespace from Helm chart (if it's not defined, default to 'egov')
      #     NAMESPACE=$(yq e '.namespace // "egov"' "$CHART_DIR/values.yaml")
      #     echo "Using namespace: $NAMESPACE"
          
      #     # Step 3: Deploy using Helm
      #     echo "Deploying service using Helm..."
          
      #     if [ "$DB_EXISTS" = true ]; then
      #       echo "Deploying application and database containers..."
      #       helm upgrade --install "$SERVICE_NAME" "$CHART_DIR" \
      #         --namespace "$NAMESPACE" \
      #         -f "$CHART_DIR/values.yaml" \
      #         --set image.tag="${DOCKER_IMAGE##*:}" \
      #         --set initContainers.dbMigration.image.tag="${DB_IMAGE##*:}" \
      #         --set global.domain="$DOMAIN_NAME" \
      #         --set db.image.repository="$SERVICE_NAME-db"  # Explicitly set the db image repository
      #     else
      #       echo "Deploying only the application container..."
      #       helm upgrade --install "$SERVICE_NAME" "$CHART_DIR" \
      #         --namespace "$NAMESPACE" \
      #         -f "$CHART_DIR/values.yaml" \
      #         --set image.tag="${DOCKER_IMAGE##*:}" \
      #         --set global.domain="$DOMAIN_NAME"
      #     fi
      #   shell: /usr/bin/bash -e {0}
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}