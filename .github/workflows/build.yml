name: Dynamic Build and Deployment Pipeline

on:
  push:
    branches:
      - master  # Trigger pipeline on changes pushed to the master branch
  workflow_dispatch:  # Allow manual triggering

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.detect.outputs.changed-services }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Fetch the last two commits to allow HEAD~1

      - name: Detect Changed Services
        id: detect
        run: |
          # Get the list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
          
          # Filter out unique top-level directories within 'core-services'
          CHANGED_SERVICES=$(echo "$CHANGED_FILES" | grep -E '^core-services/' | cut -d'/' -f1,2 | uniq)
          
          # Convert to a plain comma-separated string if there are any services
          if [[ -z "$CHANGED_SERVICES" ]]; then
            CHANGED_SERVICES=""
          else
            CHANGED_SERVICES=$(echo "$CHANGED_SERVICES" | tr '\n' ',')
            CHANGED_SERVICES=${CHANGED_SERVICES%,}  # Remove trailing comma
          fi
          
          echo "Changed Services: $CHANGED_SERVICES"
          
          # Set the environment variable in the correct format for later use
          echo "changed-services=$CHANGED_SERVICES" >> $GITHUB_ENV

      - name: Debug Output
        run: |
          echo "Changed Services: ${{ env.changed-services }}"


  # build-and-deploy:
  #   needs: detect-changes
  #   if: ${{ needs.detect-changes.outputs.changed-services != '[]' }} # Proceed only if services changed
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       service: ${{ fromJson(needs.detect-changes.outputs.changed-services) }}
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Build Service
  #       run: |
  #         echo "Building Service: ${{ matrix.service }}"
  #         cd ${{ matrix.service }}
  #         ./build.sh

  #     - name: Package Service
  #       run: |
  #         echo "Packaging Service: ${{ matrix.service }}"
  #         cd ${{ matrix.service }}
  #         ./package.sh
