name: Dynamic Build and Deployment Pipeline

on:
  push:
    branches:
      - master  # Trigger pipeline on changes pushed to the master branch
  # workflow_dispatch:  # Allow manual triggering
    paths:
      - 'core-services/**'  # Trigger only if files within 'core-services' change

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.detect.outputs.changed-services }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Fetch the last two commits to allow HEAD~1

      - name: Detect Changed Services
        id: detect
        run: |
          # Get the list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
          
          # Filter out unique top-level directories within 'core-services'
          CHANGED_SERVICES=$(echo "$CHANGED_FILES" | grep -E '^core-services/' | cut -d'/' -f2 | uniq)
          
          # Convert to a plain comma-separated string if there are any services
          if [[ -z "$CHANGED_SERVICES" ]]; then
            CHANGED_SERVICES=""
          else
            CHANGED_SERVICES=$(echo "$CHANGED_SERVICES" | tr '\n' ',')
            CHANGED_SERVICES=${CHANGED_SERVICES%,}  # Remove trailing comma
          fi
          
          echo "Changed Services: $CHANGED_SERVICES"
          
          # Output the result as a valid JSON array
          if [[ -n "$CHANGED_SERVICES" ]]; then
            CHANGED_SERVICES_JSON="[\"$(echo $CHANGED_SERVICES | sed 's/,/","/g')\"]"
            echo "::set-output name=changed-services::$CHANGED_SERVICES_JSON"
          else
            echo "::set-output name=changed-services::[]"
          fi
      - name: Debug Output
        run: |
          echo "Changed Services: ${{ steps.detect.outputs.changed-services }}"

  build:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.changed-services != '[]' }}
    runs-on: ubuntu-latest
    outputs:
      db-image2: ${{ steps.save-db-image.outputs.db-image1 }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.changed-services) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate the Next Tag
        id: tag
        run: |
          # Generate tag logic here
          echo "::set-output name=tag::generated-tag"
          echo "Generated Tag: generated-tag"

      - name: Check if DB folder exists
        id: check-db-folder
        run: |
          FOLDER_PATH="core-services/${{ matrix.service }}/src/main/resources/db"
          if [ -d "$FOLDER_PATH" ]; then
            echo "folder_exists=true" >> $GITHUB_ENV
          else
            echo "folder_exists=false" >> $GITHUB_ENV
          fi

      - name: Build and Push Database Docker Image
        if: ${{ env.folder_exists == 'true' }}
        id: build_push_db_docker
        uses: docker/build-push-action@v5
        with:
          context: core-services/${{ matrix.service }}/src/main/resources/db
          file: core-services/${{ matrix.service }}/src/main/resources/db/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-db:generated-tag

      - name: Save Database Docker Image
        if: ${{ env.folder_exists == 'true' }}
        id: save-db-image
        run: |
          DB_IMAGE="${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-db:generated-tag"
          echo "db-image1=$DB_IMAGE" >> $GITHUB_OUTPUT

      - name: Debug Save Database Docker Image Output
        if: ${{ env.folder_exists == 'true' }}
        run: |
          echo "Saved DB Image: ${{ steps.save-db-image.outputs.db-image1 }}"

  Deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ needs.build.outputs.db-image2 && needs.build.outputs.db-image2 != '' }}
    steps:
      - name: Debug Deploy Job Inputs
        run: |
          echo "Received db-image2: ${{ needs.build.outputs.db-image2 }}"
